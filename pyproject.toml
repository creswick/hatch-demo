[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hatch-demo"
dynamic = ["version"]
description = 'Playing around with Hatch to try and set up an idealized python project.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Rogan Creswick", email = "creswick@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [

]

[project.urls]
Documentation = "https://github.com/creswick/hatch-demo#readme"
Issues = "https://github.com/creswick/hatch-demo/issues"
Source = "https://github.com/creswick/hatch-demo"

[tool.hatch.version]
path = "src/hatch_demo/__about__.py"

[tool.hatch.envs.lint]
extra-dependencies = [
  "mypy>=1.0.0",
  "pytest>=8.3.3",
  "black>=23.1.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typecheck = "mypy --install-types --non-interactive {args:src/hatch_demo tests}"

style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:./src/hatch_demo tests}",
  "ruff --fix {args:./src/hatch_demo tests}",
  "style",
]
all = [
  "style",
  "typecheck",
]

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.ruff]
line-length = 120
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["autogradinglean"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.hatch.envs.hatch-test]
default-args = ["tests"]

[tool.coverage.run]
source_pkgs = ["hatch_demo", "tests"]
branch = true
parallel = true
omit = [
  "src/hatch_demo/__about__.py",
]

[tool.coverage.paths]
hatch_demo = ["src/hatch_demo", "*/hatch-demo/src/hatch_demo"]
tests = ["tests", "*/hatch-demo/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
